module.exports = { contents: "\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar apollo_client_1 = require(\"apollo-client\");\nvar graphql_1 = require(\"graphql\");\n\nvar LocalNetworkInterface = function () {\n    function LocalNetworkInterface(schema) {\n        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        _classCallCheck(this, LocalNetworkInterface);\n\n        this.schema = null;\n        this.schema = schema;\n    }\n\n    _createClass(LocalNetworkInterface, [{\n        key: \"query\",\n        value: function query(request) {\n            console.log('want to query here.....');\n            var query = request.query,\n                variables = request.variables;\n\n            return graphql_1.graphql(this.schema, apollo_client_1.printAST(query), null, null, variables);\n        }\n    }, {\n        key: \"getSchema\",\n        value: function getSchema() {\n            return this.schema;\n        }\n    }]);\n\n    return LocalNetworkInterface;\n}();\n\nexports.LocalNetworkInterface = LocalNetworkInterface;\nfunction createLocalNetworkInterface(interfaceOpts) {\n    var _ref = interfaceOpts || {},\n        _ref$opts = _ref.opts,\n        opts = _ref$opts === undefined ? {} : _ref$opts,\n        schema = _ref.schema;\n\n    if (!schema) {\n        throw 'A schema is required for a network layer';\n    }\n    return new LocalNetworkInterface(schema, opts);\n}\nexports.createLocalNetworkInterface = createLocalNetworkInterface;",
dependencies: ["apollo-client","graphql"],
sourceMap: "{\"version\":3,\"sources\":[\"localInterface.js\"],\"names\":[\"Object\",\"defineProperty\",\"exports\",\"value\",\"apollo_client_1\",\"require\",\"graphql_1\",\"LocalNetworkInterface\",\"schema\",\"opts\",\"request\",\"console\",\"log\",\"query\",\"variables\",\"graphql\",\"printAST\",\"createLocalNetworkInterface\",\"interfaceOpts\"],\"mappings\":\"AAAA;;;;;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAMC,kBAAkBC,QAAQ,eAAR,CAAxB;AACA,IAAMC,YAAYD,QAAQ,SAAR,CAAlB;;IACME,qB;AACF,mCAAYC,MAAZ,EAA+B;AAAA,YAAXC,IAAW,uEAAJ,EAAI;;AAAA;;AAC3B,aAAKD,MAAL,GAAc,IAAd;AACA,aAAKA,MAAL,GAAcA,MAAd;AACH;;;;8BACKE,O,EAAS;AACXC,oBAAQC,GAAR,CAAY,yBAAZ;AADW,gBAEHC,KAFG,GAEkBH,OAFlB,CAEHG,KAFG;AAAA,gBAEIC,SAFJ,GAEkBJ,OAFlB,CAEII,SAFJ;;AAGX,mBAAOR,UAAUS,OAAV,CAAkB,KAAKP,MAAvB,EAA+BJ,gBAAgBY,QAAhB,CAAyBH,KAAzB,CAA/B,EAAgE,IAAhE,EAAsE,IAAtE,EAA4EC,SAA5E,CAAP;AACH;;;oCACW;AACR,mBAAO,KAAKN,MAAZ;AACH;;;;;;AAELN,QAAQK,qBAAR,GAAgCA,qBAAhC;AACA,SAASU,2BAAT,CAAqCC,aAArC,EAAoD;AAAA,eACjBA,iBAAiB,EADA;AAAA,yBACxCT,IADwC;AAAA,QACxCA,IADwC,6BACjC,EADiC;AAAA,QAC7BD,MAD6B,QAC7BA,MAD6B;;AAEhD,QAAI,CAACA,MAAL,EAAa;AACT,cAAM,0CAAN;AACH;AACD,WAAO,IAAID,qBAAJ,CAA0BC,MAA1B,EAAkCC,IAAlC,CAAP;AACH;AACDP,QAAQe,2BAAR,GAAsCA,2BAAtC\",\"file\":\"localInterface.js\",\"sourcesContent\":[\"\\\"use strict\\\";\\nObject.defineProperty(exports, \\\"__esModule\\\", { value: true });\\nconst apollo_client_1 = require(\\\"apollo-client\\\");\\nconst graphql_1 = require(\\\"graphql\\\");\\nclass LocalNetworkInterface {\\n    constructor(schema, opts = {}) {\\n        this.schema = null;\\n        this.schema = schema;\\n    }\\n    query(request) {\\n        console.log('want to query here.....');\\n        const { query, variables } = request;\\n        return graphql_1.graphql(this.schema, apollo_client_1.printAST(query), null, null, variables);\\n    }\\n    getSchema() {\\n        return this.schema;\\n    }\\n}\\nexports.LocalNetworkInterface = LocalNetworkInterface;\\nfunction createLocalNetworkInterface(interfaceOpts) {\\n    const { opts = {}, schema, } = interfaceOpts || {};\\n    if (!schema) {\\n        throw 'A schema is required for a network layer';\\n    }\\n    return new LocalNetworkInterface(schema, opts);\\n}\\nexports.createLocalNetworkInterface = createLocalNetworkInterface;\\n\"]}",
headerContent: undefined,
mtime: 1491331655000
};